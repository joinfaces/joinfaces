buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        def freefairGradleVersion = "6.6.1"
        classpath "io.freefair.gradle:lombok-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:maven-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:maven-plugin-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:git-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:okhttp-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:jacoco-plugin:$freefairGradleVersion"
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.5"
        classpath "com.netflix.nebula:gradle-lint-plugin:18.0.0"
        classpath "de.aaschmid:gradle-cpd-plugin:3.3"
    }
}

plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

apply plugin: 'io.freefair.git-version'
apply plugin: 'io.freefair.aggregate-jacoco-report'

allprojects {
    group = 'org.joinfaces'

    apply plugin: 'nebula.lint'

    gradleLint {
        //https://github.com/nebula-plugins/gradle-lint-plugin/issues/263
        //rules = ['transitive-duplicate-dependency-class', 'duplicate-dependency-class']
        criticalRules = ['dependency-parentheses']
    }

    plugins.withId("java") {
        apply plugin: "io.freefair.lombok"

        sourceCompatibility = 17
        targetCompatibility = 17

        java {
            withSourcesJar()
            withJavadocJar()
        }

        tasks.withType(JavaCompile).configureEach {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-parameters'
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }

        plugins.withId("io.freefair.maven-publish-java") {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        versionMapping {
                            usage('java-api') {
                                fromResolutionOf('runtimeClasspath')
                            }
                            usage('java-runtime') {
                                fromResolutionResult()
                            }
                        }
                    }
                }
            }
        }

        afterEvaluate { p ->
            tasks.named('jar', Jar) {
                manifest {
                    attributes 'Implementation-Title': "$p.description",
                            'Implementation-Version': "$p.version",
                            'Implementation-Vendor': "JoinFaces"
                }
            }
        }
    }

    tasks.withType(Javadoc).configureEach {
        failOnError = false
    }

    plugins.withId("pmd") {
        pmd {
            consoleOutput = true
            ruleSetConfig = resources.text.fromFile("$rootDir/config/pmd/pmd-ruleset.xml")
            ruleSets = []
        }
        pmdTest.enabled = false
    }

    plugins.withId("jacoco") {
        tasks.withType(JacocoReport).configureEach {
            reports.xml.required = true
        }
    }

    plugins.withId("maven-publish") {

        project.apply plugin: "signing"
        project.apply plugin: "io.freefair.maven-central.validate-poms"

        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }

            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
        }

        publishing {
            publications.withType(MavenPublication) {
                pom {
                    url = provider { 'https://docs.joinfaces.org/' + project.version + '/reference/' }
                    name = provider { project.description }
                    description = provider { project.description }
                    inceptionYear = '2016'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    organization {
                        name = 'JoinFaces'
                        url = 'https://github.com/joinfaces'
                    }
                    developers {
                        developer {
                            id = 'persapiens'
                            name = 'Marcelo Romulo Fernandes'
                            email = 'persapiens@gmail.com'
                            timezone = '-3'
                        }
                        developer {
                            id = 'larsgrefer'
                            name = 'Lars Grefer'
                            email = 'github@larsgrefer.de'
                            timezone = 'Europe/Berlin'
                        }
                    }
                    ciManagement {
                        system = 'GitHub Actions'
                        url = 'https://github.com/joinfaces/joinfaces/actions'
                    }
                    issueManagement {
                        system = 'GitHub Issues'
                        url = 'https://github.com/joinfaces/joinfaces/issues'
                    }
                    scm {
                        connection = 'scm:git:https://github.com/joinfaces/joinfaces.git'
                        developerConnection = 'scm:git:git@github.com:joinfaces/joinfaces.git'
                        url = 'https://github.com/joinfaces/joinfaces/'
                    }
                }
            }
        }
    }
}

apply plugin: "de.aaschmid.cpd"

tasks.named("cpdCheck") {
    exclude "**/*Test.java"
    exclude "**/*IT.java"
}

apply plugin: "maven-publish"
apply plugin: "io.freefair.aggregate-javadoc-jar"
apply plugin: "io.freefair.javadoc-links"

tasks.named("aggregateJavadoc") {
    title = "JoinFaces $version API"
}

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '9d2198adfd84d'
        }
    }
}

tasks.register("propertyDocs", org.joinfaces.build.PropertyDocumentation) {
    inputFile = file("joinfaces-autoconfigure/build/classes/java/main/META-INF/spring-configuration-metadata.json")
    outputFile = file("src/docs/asciidoc/generated/_properties.adoc")
    dependsOn ":joinfaces-autoconfigure:classes"
}

tasks.register("bomDocs", org.joinfaces.build.BomDocumentation) {
    dependsOn ":joinfaces-dependencies:generatePomFileForBomPublication"
    inputFile = tasks.findByPath(":joinfaces-dependencies:generatePomFileForBomPublication").destination
    outputFile = file("src/docs/asciidoc/generated/_versions.adoc")
}

tasks.named("asciidoctor", org.asciidoctor.gradle.jvm.AsciidoctorTask) {
    baseDirFollowsSourceDir()
    dependsOn propertyDocs, bomDocs
    inputs.dir("src/docs/asciidoc")
    attributes revnumber: project.version,
            'spring-version': '6.0.x',
            'spring-boot-version': org.springframework.boot.gradle.plugin.SpringBootPlugin.SPRING_BOOT_VERSION
}

tasks.register("docsZip", Zip) {
    group = 'build'
    archiveClassifier = 'docs'
    dependsOn asciidoctor

    into("api") {
        from aggregateJavadoc
    }
    from("$asciidoctor.outputDir") {
        into "reference"
    }
}

apply plugin: 'io.freefair.okhttp'

tasks.register("uploadDocs", io.freefair.gradle.plugins.okhttp.tasks.UploadFile) {
    dependsOn docsZip
    file = docsZip.archiveFile
    username = findProperty("joinfacesDocsUser")
    password = findProperty("joinfacesDocsPass")
    url = "https://docs.joinfaces.org/api/$project.version"
}

publishing {
    publications {
        javadoc(MavenPublication) {
            artifactId = 'joinfaces-parent'

            pom {
                name = "JoinFaces"
                description = "JoinFaces"
            }

            artifact tasks.named("aggregateJavadocJar")

            signing.sign it
        }
    }
}
