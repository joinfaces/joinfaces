buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:5.0.0-rc4"
        classpath "io.freefair.gradle:maven-plugin:5.0.0-rc4"
        classpath "io.freefair.gradle:maven-plugin-plugin:5.0.0-rc4"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
        classpath "com.netflix.nebula:gradle-lint-plugin:16.2.3"
        classpath "de.aaschmid:gradle-cpd-plugin:3.1"
        classpath "com.gradle.publish:plugin-publish-plugin:0.10.1"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
        classpath 'com.google.guava:guava:27.1-jre'
    }
}

plugins {
    id 'io.freefair.git-version' version '5.0.0-rc4'
    id "org.asciidoctor.jvm.convert" version "3.1.0"
    id 'io.freefair.aggregate-jacoco-report' version '5.0.0-rc4'
    id 'io.freefair.okhttp' version '5.0.0-rc4'
}

allprojects {
    group = 'org.joinfaces'

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
    }

    apply plugin: 'nebula.lint'

    gradleLint {
        //https://github.com/nebula-plugins/gradle-lint-plugin/issues/263
        //rules = ['transitive-duplicate-dependency-class', 'duplicate-dependency-class']
        criticalRules = ['dependency-parentheses']
    }

    plugins.withId("java") {
        apply plugin: "io.freefair.lombok"

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        java {
            withSourcesJar()
            withJavadocJar()
        }

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        tasks.withType(Test) {
            useJUnitPlatform()
        }

        afterEvaluate {
            jar.manifest {
                attributes 'Implementation-Title': "$description",
                        'Implementation-Version': "$version",
                        'Implementation-Vendor': "JoinFaces"
            }
        }
    }

    plugins.withId("pmd") {
        pmd {
            ruleSetConfig = resources.text.fromFile("$rootDir/config/pmd/pmd-ruleset.xml")
            ruleSets = []
        }
        pmdTest.enabled = false
    }

    plugins.withId("jacoco") {
        tasks.withType(JacocoReport).configureEach {
            reports.xml.enabled true
        }
    }

    plugins.withId("maven-publish") {
        project.apply plugin: 'de.marcphilipp.nexus-publish'

        nexusPublishing {
            repositories {
                sonatype()
            }
        }

        project.apply plugin: "signing"
        project.apply plugin: "io.freefair.maven-central.validate-poms"

        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
        }

        publishing {
            publications.withType(MavenPublication) {
                pom {
                    url = provider { 'https://docs.joinfaces.org/' + project.version + '/reference/' }
                    name = provider { project.description }
                    description = provider { project.description }
                    inceptionYear = '2016'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    organization {
                        name = 'JoinFaces'
                        url = 'https://github.com/joinfaces'
                    }
                    developers {
                        developer {
                            id = 'persapiens'
                            name = 'Marcelo Romulo Fernandes'
                            email = 'persapiens@gmail.com'
                            timezone = '-3'
                        }
                        developer {
                            id = 'larsgrefer'
                            name = 'Lars Grefer'
                            email = 'github@larsgrefer.de'
                            timezone = 'Europe/Berlin'
                        }
                    }
                    ciManagement {
                        system = 'Travis CI'
                        url = 'https://travis-ci.org/joinfaces/joinfaces/'
                    }
                    issueManagement {
                        system = 'Github'
                        url = 'https://github.com/joinfaces/joinfaces/issues'
                    }
                    scm {
                        connection = 'scm:git:https://github.com/joinfaces/joinfaces.git'
                        developerConnection = 'scm:git:git@github.com:joinfaces/joinfaces.git'
                        url = 'https://github.com/joinfaces/joinfaces/'
                    }
                }
            }
        }
    }
}

apply plugin: "de.aaschmid.cpd"

cpdCheck {
    exclude "**/*Test.java"
    exclude "**/*IT.java"
}

apply plugin: "maven-publish"
apply plugin: "io.freefair.aggregate-javadoc-jar"
apply plugin: "io.freefair.javadoc-links"

aggregateJavadoc.failOnError = false
aggregateJavadoc.title = "JoinFaces $version API"

apply plugin: "io.codearte.nexus-staging"

nexusStaging {
    stagingProfileId = '9d2198adfd84d'
    username = findProperty('ossrhUser')
    password = findProperty('ossrhPass')
    delayBetweenRetriesInMillis = 5000
}

task propertyDocs(type: org.joinfaces.build.PropertyDocumentation) {
    inputFile = file("joinfaces-autoconfigure/build/classes/java/main/META-INF/spring-configuration-metadata.json")
    outputFile = file("src/docs/asciidoc/generated/_properties.adoc")
    dependsOn ":joinfaces-autoconfigure:classes"
}

task bomDocs(type: org.joinfaces.build.BomDocumentation) {
    afterEvaluate {
        dependsOn "joinfaces-dependencies:generatePomFileForBomPublication"
        inputFile = tasks.findByPath("joinfaces-dependencies:generatePomFileForBomPublication").destination
    }
    outputFile = file("src/docs/asciidoc/generated/_versions.adoc")
}

apply plugin: "org.joinfaces.build.spring-boot-versions"

asciidoctor {
    baseDirFollowsSourceDir()
    dependsOn propertyDocs, bomDocs
    inputs.dir("src/docs/asciidoc")
    attributes revnumber: project.version,
            'spring-version': springBootBomProperties['spring-framework.version'],
            'spring-boot-version': org.springframework.boot.gradle.plugin.SpringBootPlugin.SPRING_BOOT_VERSION
}

task docsZip(type: Zip) {
    group = 'build'
    archiveClassifier = 'docs'
    dependsOn asciidoctor

    into("api") {
        from aggregateJavadoc
    }
    from("$asciidoctor.outputDir") {
        into "reference"
    }
}

task uploadDocs(type: io.freefair.gradle.plugins.okhttp.tasks.UploadFile) {
    dependsOn docsZip
    file = docsZip.archiveFile
    username = findProperty("joinfacesDocsUser")
    password = findProperty("joinfacesDocsPass")
    url = "https://docs.joinfaces.org/api/$project.version"
}

publishing {
    publications {
        javadoc(MavenPublication) {
            artifactId = 'joinfaces'

            pom {
                name = "JoinFaces"
                description = "JoinFaces"
            }

            artifact aggregateJavadocJar

            signing.sign it
        }
    }
}
