import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        def freefairGradleVersion = "6.0.0-m2"
        classpath "io.freefair.gradle:lombok-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:maven-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:maven-plugin-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:git-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:okhttp-plugin:$freefairGradleVersion"
        classpath "io.freefair.gradle:jacoco-plugin:$freefairGradleVersion"
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.1"
        classpath "com.netflix.nebula:gradle-lint-plugin:16.26.0"
        classpath "de.aaschmid:gradle-cpd-plugin:3.2"
        classpath "com.gradle.publish:plugin-publish-plugin:0.15.0"
    }
}

plugins {
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

apply plugin: 'io.freefair.git-version'
apply plugin: 'io.freefair.aggregate-jacoco-report'

allprojects {
    group = 'org.joinfaces'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency 'jakarta.faces:jakarta.faces-api:2.3.2'

            dependency 'org.glassfish:jakarta.faces:2.3.16'

            dependencySet('org.apache.myfaces.core:2.3.9') {
                entry "myfaces-api"
                entry("myfaces-impl") {
                    exclude "commons-logging:commons-logging"
                }
            }

            dependency('javax.enterprise:cdi-api:2.0.SP1') {
                exclude "javax.el:javax.el-api"
            }

            dependency "org.apache.tomcat:tomcat-jasper:${importedProperties['tomcat.version']}"
            dependency 'org.jboss.spec.javax.servlet.jsp:jboss-jsp-api_2.3_spec:2.0.0.Final'

            dependency 'io.github.classgraph:classgraph:4.8.110'

            dependency 'org.primefaces:primefaces:10.0.0'
            dependencySet("org.primefaces.extensions:10.0.2") {
                entry "primefaces-extensions"
                entry "resources-ckeditor"
                entry "resources-monacoeditor"
            }

            dependency 'net.bootsfaces:bootsfaces:1.5.0'
            dependency('de.beyondjava:angularFaces-core:2.1.12') {
                exclude "commons-logging:commons-logging"
            }
            dependency 'org.butterfaces:components:3.5.0'

            dependencySet('org.richfaces:4.5.17.Final') {
                entry "richfaces"
                entry "richfaces-a4j"
            }

            dependencySet('com.github.albfernandez.richfaces:4.6.13.ayg') {
                entry "richfaces"
                entry "richfaces-a4j"
            }

            dependencySet('org.icefaces:4.3.0') {
                entry('icefaces') {
                    exclude "org.glassfish:javax.faces"
                }
                entry 'icefaces-ace'
            }

            dependency "commons-fileupload:commons-fileupload:1.4"

            dependency('org.jboss.weld.servlet:weld-servlet-core:4.0.2.Final') {
                exclude 'org.jboss.spec.javax.el:jboss-el-api_3.0_spec'
                exclude 'org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec'
            }

            dependencySet("org.ocpsoft.rewrite:3.5.0.Final") {
                entry "rewrite-servlet"
                entry "rewrite-config-prettyfaces"
                entry "rewrite-integration-spring"
                entry "rewrite-integration-faces"
                entry "rewrite-integration-cdi"
            }
            dependency 'org.ocpsoft.logging:logging-adapter-slf4j:1.0.5.Final'

            dependency "com.github.adminfaces:admin-template:1.3.0"
            dependency "com.github.adminfaces:admin-theme:1.3.0"

            dependency 'jakarta.ejb:jakarta.ejb-api:3.2.6'
            dependency 'jakarta.el:jakarta.el-api:3.0.3'

            dependencySet('org.apache.myfaces.tobago:4.5.4') {
                entry 'tobago-core'
                entry 'tobago-theme-standard'
                entry 'tobago-theme-speyside'
                entry 'tobago-theme-scarborough'
                entry 'tobago-theme-richmond'
                entry 'tobago-theme-charlotteville'
            }
        }
    }

    apply plugin: 'nebula.lint'

    gradleLint {
        //https://github.com/nebula-plugins/gradle-lint-plugin/issues/263
        //rules = ['transitive-duplicate-dependency-class', 'duplicate-dependency-class']
        criticalRules = ['dependency-parentheses']
    }

    plugins.withId("java") {
        apply plugin: "io.freefair.lombok"

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        java {
            withSourcesJar()
            withJavadocJar()
        }

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        tasks.withType(Test) {
            useJUnitPlatform()
        }

        afterEvaluate {
            jar.manifest {
                attributes 'Implementation-Title': "$description",
                        'Implementation-Version': "$version",
                        'Implementation-Vendor': "JoinFaces"
            }
        }
    }

    tasks.withType(Javadoc) {
        failOnError = false
    }

    plugins.withId("pmd") {
        pmd {
            ruleSetConfig = resources.text.fromFile("$rootDir/config/pmd/pmd-ruleset.xml")
            ruleSets = []
        }
        pmdTest.enabled = false
    }

    plugins.withId("jacoco") {
        tasks.withType(JacocoReport).configureEach {
            reports.xml.enabled true
        }
    }

    plugins.withId("maven-publish") {

        project.apply plugin: "signing"
        project.apply plugin: "io.freefair.maven-central.validate-poms"

        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }

            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
        }

        publishing {
            publications.withType(MavenPublication) {
                pom {
                    url = provider { 'https://docs.joinfaces.org/' + project.version + '/reference/' }
                    name = provider { project.description }
                    description = provider { project.description }
                    inceptionYear = '2016'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    organization {
                        name = 'JoinFaces'
                        url = 'https://github.com/joinfaces'
                    }
                    developers {
                        developer {
                            id = 'persapiens'
                            name = 'Marcelo Romulo Fernandes'
                            email = 'persapiens@gmail.com'
                            timezone = '-3'
                        }
                        developer {
                            id = 'larsgrefer'
                            name = 'Lars Grefer'
                            email = 'github@larsgrefer.de'
                            timezone = 'Europe/Berlin'
                        }
                    }
                    ciManagement {
                        system = 'GitHub Actions'
                        url = 'https://github.com/joinfaces/joinfaces/actions'
                    }
                    issueManagement {
                        system = 'GitHub Issues'
                        url = 'https://github.com/joinfaces/joinfaces/issues'
                    }
                    scm {
                        connection = 'scm:git:https://github.com/joinfaces/joinfaces.git'
                        developerConnection = 'scm:git:git@github.com:joinfaces/joinfaces.git'
                        url = 'https://github.com/joinfaces/joinfaces/'
                    }
                }
            }
        }

        tasks.withType(GenerateModuleMetadata) {
            enabled = false
        }
    }
}

apply plugin: "de.aaschmid.cpd"

cpdCheck {
    exclude "**/*Test.java"
    exclude "**/*IT.java"
}

apply plugin: "maven-publish"
apply plugin: "io.freefair.aggregate-javadoc-jar"
apply plugin: "io.freefair.javadoc-links"

aggregateJavadoc.title = "JoinFaces $version API"

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '9d2198adfd84d'
        }
    }
}

task propertyDocs(type: org.joinfaces.build.PropertyDocumentation) {
    inputFile = file("joinfaces-autoconfigure/build/classes/java/main/META-INF/spring-configuration-metadata.json")
    outputFile = file("src/docs/asciidoc/generated/_properties.adoc")
    dependsOn ":joinfaces-autoconfigure:classes"
}

task bomDocs(type: org.joinfaces.build.BomDocumentation) {
    afterEvaluate {
        dependsOn generatePomFileForBomPublication
        inputFile = generatePomFileForBomPublication.destination
    }
    outputFile = file("src/docs/asciidoc/generated/_versions.adoc")
}

asciidoctor {
    baseDirFollowsSourceDir()
    dependsOn propertyDocs, bomDocs
    inputs.dir("src/docs/asciidoc")
    attributes revnumber: project.version,
            'spring-version': dependencyManagement.importedProperties['spring-framework.version'],
            'spring-boot-version': org.springframework.boot.gradle.plugin.SpringBootPlugin.SPRING_BOOT_VERSION
}

task docsZip(type: Zip) {
    group = 'build'
    archiveClassifier = 'docs'
    dependsOn asciidoctor

    into("api") {
        from aggregateJavadoc
    }
    from("$asciidoctor.outputDir") {
        into "reference"
    }
}

apply plugin: 'io.freefair.okhttp'

task uploadDocs(type: io.freefair.gradle.plugins.okhttp.tasks.UploadFile) {
    dependsOn docsZip
    file = docsZip.archiveFile
    username = findProperty("joinfacesDocsUser")
    password = findProperty("joinfacesDocsPass")
    url = "https://docs.joinfaces.org/api/$project.version"
}

publishing {
    publications {
        bom(MavenPublication) {
            artifactId = 'joinfaces-dependencies'

            pom {
                name = 'JoinFaces Dependencies'
                description = 'JoinFaces Dependencies'
            }

            pom.withXml {
                rootProject.subprojects { p ->
                    if (p.pluginManager.hasPlugin('maven-publish')) {
                        def depNode = asNode().dependencyManagement.first().get('dependencies').first().appendNode('dependency')
                        depNode.appendNode('groupId', p.group)
                        depNode.appendNode('artifactId', p.name)
                        depNode.appendNode('version', p.version)
                    }
                }
            }

            signing.sign it
        }
        javadoc(MavenPublication) {
            artifactId = 'joinfaces'

            pom {
                name = "JoinFaces"
                description = "JoinFaces"
            }

            artifact aggregateJavadocJar

            signing.sign it
        }
    }
}
