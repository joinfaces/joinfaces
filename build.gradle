import org.springframework.boot.gradle.plugin.SpringBootPlugin

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:3.6.4"
        classpath "io.freefair.gradle:maven-plugin:3.6.4"
        classpath "io.freefair.gradle:maven-plugin-plugin:3.6.4"
        classpath "io.freefair.gradle:github-plugin:3.6.4"
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.7.1"
        classpath "com.netflix.nebula:gradle-lint-plugin:11.5.0"
        classpath "de.aaschmid:gradle-cpd-plugin:1.3"
        classpath "com.gradle.publish:plugin-publish-plugin:0.10.1"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.20.0"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.2.0"
        classpath 'com.google.guava:guava:27.1-jre'
    }
}

plugins {
    id 'org.asciidoctor.convert' version '2.0.0-rc.1'
}

version = resolveVersion()

allprojects {
    group = 'org.joinfaces'
    version = rootProject.version

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency 'jakarta.faces:jakarta.faces-api:2.3.1'

            dependency 'org.glassfish:jakarta.faces:2.3.9'

            dependencySet('org.apache.myfaces.core:2.3.3') {
                entry "myfaces-api"
                entry("myfaces-impl") {
                    exclude "commons-logging:commons-logging"
                }
            }

            dependency('javax.enterprise:cdi-api:2.0.SP1') {
                exclude "javax.el:javax.el-api"
            }

            dependency "org.apache.tomcat:tomcat-jasper:${importedProperties['tomcat.version']}"
            dependency 'org.jboss.spec.javax.servlet.jsp:jboss-jsp-api_2.3_spec:1.0.3.Final'

            dependency 'io.github.classgraph:classgraph:4.8.29'

            dependency 'org.primefaces:primefaces:7.0'
            dependencySet("org.primefaces.extensions:7.0") {
                entry "primefaces-extensions"
                entry "resources-ckeditor"
            }

            dependency 'net.bootsfaces:bootsfaces:1.4.1'
            dependency('de.beyondjava:angularFaces-core:2.1.12') {
                exclude "commons-logging:commons-logging"
            }
            dependency 'org.butterfaces:components:3.1.1'

            dependencySet('org.richfaces:4.5.17.Final') {
                entry "richfaces"
                entry "richfaces-a4j"
            }

            dependencySet('org.icefaces:4.3.0') {
                entry 'icefaces'
                entry 'icefaces-ace'
            }

            dependency "commons-fileupload:commons-fileupload:1.4"

            dependency('org.jboss.weld.servlet:weld-servlet-core:3.1.1.Final') {
                exclude 'org.jboss.spec.javax.el:jboss-el-api_3.0_spec'
                exclude 'org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec'
            }

            dependencySet("org.ocpsoft.rewrite:3.4.2.Final") {
                entry "rewrite-servlet"
                entry "rewrite-config-prettyfaces"
                entry "rewrite-integration-spring"
                entry "rewrite-integration-faces"
                entry "rewrite-integration-cdi"
            }
            dependency 'org.ocpsoft.logging:logging-adapter-slf4j:1.0.5.Final'

            dependencySet('com.github.adminfaces:1.0.0') {
                entry "admin-template"
                entry "admin-theme"
            }

            dependency 'javax.ejb:javax.ejb-api:3.2.2'
        }
    }

    apply plugin: 'nebula.lint'

    gradleLint {
        rules = ['transitive-duplicate-dependency-class']
        criticalRules = ['duplicate-dependency-class', 'dependency-parentheses']
    }

    plugins.withId("java") {
        apply plugin: "io.freefair.lombok"

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        tasks.withType(JavaCompile) {
            options.encoding = 'UTF-8'
        }

        javadoc.failOnError = false

        tasks.withType(Test) {
            useJUnitPlatform()
        }

        afterEvaluate {
            jar.manifest {
                attributes 'Implementation-Title': "$description",
                        'Implementation-Version': "$version",
                        'Implementation-Vendor': "JoinFaces"
            }
        }
    }

    plugins.withId("checkstyle") {
        checkstyle {
            toolVersion = '8.12'
        }
    }

    plugins.withId("pmd") {
        pmd {
            ruleSetConfig = resources.text.fromFile("$rootDir/config/pmd/pmd-ruleset.xml")
            ruleSets = []
        }
        pmdTest.enabled = false
    }

    plugins.withId("jacoco") {
        jacocoTestReport.reports.xml.enabled true
        jacoco.toolVersion = "0.8.2"
    }

    plugins.withId("maven-publish") {
        project.apply plugin: 'de.marcphilipp.nexus-publish'
        project.apply plugin: "signing"
        project.apply plugin: "io.freefair.maven-central.validate-poms"
        project.apply plugin: "io.freefair.github.pom"

        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }
        }

        publishing {
            publications.withType(MavenPublication) {
                pom {
                    name = provider { project.description }
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            id = 'persapiens'
                            name = 'Marcelo Romulo Fernandes'
                            email = 'persapiens@gmail.com'
                            timezone = '-3'
                        }
                        developer {
                            id = 'larsgrefer'
                            name = 'Lars Grefer'
                            email = 'github@larsgrefer.de'
                            timezone = 'Europe/Berlin'
                        }
                    }
                }
            }
        }
    }
}

apply plugin: "io.freefair.github.base"

github {
    slug = "joinfaces/joinfaces"
    travis = true
}

apply plugin: "de.aaschmid.cpd"

cpdCheck {
    exclude "**/*Test.java"
    exclude "**/*IT.java"
}

apply plugin: "maven-publish"
apply plugin: "io.freefair.aggregate-javadoc-jar"

aggregateJavadoc.failOnError = false
aggregateJavadoc.title = "JoinFaces $version API"
aggregateJavadoc.options.links "https://docs.oracle.com/javase/10/docs/api/"
aggregateJavadoc.options.links "https://docs.spring.io/spring-boot/docs/${org.springframework.boot.gradle.plugin.SpringBootPlugin.SPRING_BOOT_VERSION}/api/"

apply plugin: "io.codearte.nexus-staging"

nexusStaging {
    stagingProfileId = '9d2198adfd84d'
    username = findProperty('ossrhUser')
    password = findProperty('ossrhPass')
}

task propertyDocs(type: org.joinfaces.build.PropertyDocumentation) {
    inputFile = file("joinfaces-autoconfigure/build/classes/java/main/META-INF/spring-configuration-metadata.json")
    outputFile = file("src/docs/asciidoc/generated/_properties.adoc")
    dependsOn ":joinfaces-autoconfigure:classes"
}

task bomDocs(type: org.joinfaces.build.BomDocumentation) {
    afterEvaluate {
        dependsOn generatePomFileForBomPublication
        inputFile = generatePomFileForBomPublication.destination
    }
    outputFile = file("src/docs/asciidoc/generated/_versions.adoc")
}

asciidoctor {
    backends = ['html5']
    dependsOn propertyDocs, bomDocs
    attributes revnumber: project.version,
            'spring-boot-version': org.springframework.boot.gradle.plugin.SpringBootPlugin.SPRING_BOOT_VERSION
}

task docsZip(type: Zip) {
    group = 'build'
    archiveClassifier = 'docs'
    dependsOn asciidoctor

    into("api") {
        from aggregateJavadoc
    }
    from ("$asciidoctor.outputDir/html5") {
        into "reference"
    }
}

task uploadDocs(type: org.joinfaces.build.UploadDocumentation) {
    inputFile = docsZip.archiveFile
    dependsOn docsZip
    username = findProperty("joinfacesDocsUser")
    password = findProperty("joinfacesDocsPass")
}

publishing {
    publications {
        bom(MavenPublication) {
            artifactId = 'joinfaces-dependencies'

            pom {
                name = 'JoinFaces Dependencies'
                description = 'JoinFaces Dependencies'
            }

            pom.withXml {
                rootProject.subprojects { p ->
                    if (p.pluginManager.hasPlugin('maven-publish')) {
                        def depNode = asNode().dependencyManagement.first().get('dependencies').first().appendNode('dependency')
                        depNode.appendNode('groupId', p.group)
                        depNode.appendNode('artifactId', p.name)
                        depNode.appendNode('version', p.version)
                    }
                }
            }

            signing.sign it
        }
        javadoc(MavenPublication) {
            artifactId = 'joinfaces'

            pom {
                name = "JoinFaces"
                description = "JoinFaces"
            }

            artifact aggregateJavadocJar

            signing.sign it
        }
    }
}

def resolveVersion() {
    if (project.version != "unspecified") {
        logger.lifecycle("Using explicit version $project.version")
        return project.version
    }
    def travisTag = System.getenv('TRAVIS_TAG')
    if (travisTag) {
        logger.lifecycle("Using TRAVIS_TAG as version: $travisTag")
        return travisTag
    }
    def travisBranch = System.getenv('TRAVIS_BRANCH')
    if (travisBranch) {
        travisBranch = travisBranch.replace("/", "-")
        logger.lifecycle("Using TRAVIS_BRANCH as version: $travisBranch-SNAPSHOT")
        return "$travisBranch-SNAPSHOT"
    }
    try {
        def gitBranch = "git symbolic-ref --short HEAD".execute().text.trim()
        if (gitBranch) {
            gitBranch = gitBranch.replace("/", "-")
            logger.lifecycle("Using git branch as version: $gitBranch-SNAPSHOT")
            return "$gitBranch-SNAPSHOT"
        }
    } catch (Exception ignored) {
    }
    return project.version
}
