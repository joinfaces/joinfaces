import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id "io.freefair.git-version"
    id "io.freefair.aggregate-jacoco-report"
    id "io.freefair.lombok" apply false
    id "io.freefair.maven-central.validate-poms" apply false
    id "de.aaschmid.cpd" version "3.3"
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0"
    id "nebula.lint" version "18.1.0" apply false
}

allprojects {
    group = 'org.joinfaces'

    apply plugin: "io.spring.dependency-management"

    dependencyManagement {
        imports {
            mavenBom SpringBootPlugin.BOM_COORDINATES
        }

        dependencies {
            dependency 'jakarta.faces:jakarta.faces-api:2.3.2'

            dependency 'org.glassfish:jakarta.faces:2.3.19'

            dependency('jakarta.enterprise:jakarta.enterprise.cdi-api:2.0.2') {
                exclude "jakarta.el:jakarta.el-api"
                exclude "jakarta.ejb:jakarta.ejb-api"
            }

            dependency "org.apache.tomcat:tomcat-jasper:${importedProperties['tomcat.version']}"
            dependency 'org.jboss.spec.javax.servlet.jsp:jboss-jsp-api_2.3_spec:2.0.0.Final'

            dependency 'io.github.classgraph:classgraph:4.8.161'

            dependency 'org.primefaces:primefaces:13.0.0'
            dependencySet("org.primefaces.extensions:11.0.6") {
                entry "primefaces-extensions"
                entry "resources-ckeditor"
                entry "resources-monacoeditor"
            }

            dependency 'net.bootsfaces:bootsfaces:1.5.0'
            dependency('de.beyondjava:angularFaces-core:2.1.12') {
                exclude "commons-logging:commons-logging"
            }
            dependency 'org.butterfaces:components:3.5.0'

            dependencySet('org.richfaces:4.5.17.Final') {
                entry "richfaces"
                entry "richfaces-a4j"
            }

            dependencySet('com.github.albfernandez.richfaces:4.6.21.ayg') {
                entry "richfaces"
                entry "richfaces-core"
                entry "richfaces-a4j"
            }

            dependencySet('org.icefaces:4.3.0') {
                entry('icefaces') {
                    exclude "org.glassfish:javax.faces"
                }
                entry 'icefaces-ace'
            }

            dependency "commons-fileupload:commons-fileupload:1.5"

            dependency('org.jboss.weld.servlet:weld-servlet-core:3.1.9.Final') {
                exclude 'org.jboss.spec.javax.el:jboss-el-api_3.0_spec'
                exclude 'org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec'
            }

            dependencySet("org.ocpsoft.rewrite:3.5.1.Final") {
                entry "rewrite-servlet"
                entry "rewrite-config-prettyfaces"
                entry "rewrite-integration-spring"
                entry "rewrite-integration-faces"
                entry "rewrite-integration-cdi"
            }
            dependency 'org.ocpsoft.logging:logging-adapter-slf4j:1.0.5.Final'

            dependency("com.github.adminfaces:admin-template:1.6.1") {
                exclude "org.primefaces:primefaces"
            }
            dependency "com.github.adminfaces:admin-theme:1.6.0"

            dependency 'jakarta.ejb:jakarta.ejb-api:3.2.6'
            dependency 'jakarta.el:jakarta.el-api:3.0.3'

            dependencySet('org.apache.myfaces.tobago:5.4.0') {
                entry 'tobago-core'
                entry 'tobago-theme-standard'
                entry 'tobago-theme-speyside'
                entry 'tobago-theme-scarborough'
                entry 'tobago-theme-richmond'
                entry 'tobago-theme-charlotteville'
            }
        }
    }

    apply plugin: 'nebula.lint'

    gradleLint {
        //https://github.com/nebula-plugins/gradle-lint-plugin/issues/263
        //rules = ['transitive-duplicate-dependency-class', 'duplicate-dependency-class']
        criticalRules = ['dependency-parentheses']
    }

    plugins.withId("java") {
        apply plugin: "io.freefair.lombok"

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        java {
            withSourcesJar()
            withJavadocJar()
        }

        tasks.withType(JavaCompile).configureEach {
            options.encoding = 'UTF-8'
            options.compilerArgs << '-parameters'
        }

        tasks.withType(Test).configureEach {
            useJUnitPlatform()
        }

        plugins.withId("io.freefair.maven-publish-java") {
            publishing {
                publications {
                    mavenJava(MavenPublication) {
                        versionMapping {
                            usage('java-api') {
                                fromResolutionOf('runtimeClasspath')
                            }
                            usage('java-runtime') {
                                fromResolutionResult()
                            }
                        }
                    }
                }
            }
        }

        afterEvaluate { p ->
            tasks.named('jar') {
                manifest {
                    attributes 'Implementation-Title': "$p.description",
                            'Implementation-Version': "$p.version",
                            'Implementation-Vendor': "JoinFaces"
                }
            }
        }
    }

    tasks.withType(Javadoc).configureEach {
        failOnError = false
    }

    plugins.withId("pmd") {
        pmd {
            consoleOutput = true
            ruleSetConfig = resources.text.fromFile("$rootDir/config/pmd/pmd-ruleset.xml")
            ruleSets = []
        }
        pmdTest.enabled = false
    }

    plugins.withId("jacoco") {
        tasks.withType(JacocoReport).configureEach {
            reports.xml.required = true
        }
    }

    plugins.withId("maven-publish") {

        project.apply plugin: "signing"
        project.apply plugin: "io.freefair.maven-central.validate-poms"

        signing {
            required { !version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask("publish") }

            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)
        }

        publishing {
            publications.withType(MavenPublication) {
                pom {
                    url = provider { 'https://docs.joinfaces.org/' + project.version + '/reference/' }
                    name = provider { project.description }
                    description = provider { project.description }
                    inceptionYear = '2016'
                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    organization {
                        name = 'JoinFaces'
                        url = 'https://github.com/joinfaces'
                    }
                    developers {
                        developer {
                            id = 'persapiens'
                            name = 'Marcelo Romulo Fernandes'
                            email = 'persapiens@gmail.com'
                            timezone = '-3'
                        }
                        developer {
                            id = 'larsgrefer'
                            name = 'Lars Grefer'
                            email = 'github@larsgrefer.de'
                            timezone = 'Europe/Berlin'
                        }
                    }
                    ciManagement {
                        system = 'GitHub Actions'
                        url = 'https://github.com/joinfaces/joinfaces/actions'
                    }
                    issueManagement {
                        system = 'GitHub Issues'
                        url = 'https://github.com/joinfaces/joinfaces/issues'
                    }
                    scm {
                        connection = 'scm:git:https://github.com/joinfaces/joinfaces.git'
                        developerConnection = 'scm:git:git@github.com:joinfaces/joinfaces.git'
                        url = 'https://github.com/joinfaces/joinfaces/'
                    }
                }
            }
        }
    }
}

tasks.named("cpdCheck") {
    exclude "**/*Test.java"
    exclude "**/*IT.java"
}

apply plugin: "maven-publish"

nexusPublishing {
    repositories {
        sonatype {
            stagingProfileId = '9d2198adfd84d'
        }
    }
}

publishing {
    publications {
        bom(MavenPublication) {
            artifactId = 'joinfaces-dependencies'

            pom {
                name = 'JoinFaces Dependencies'
                description = 'JoinFaces Dependencies'
            }

            pom.withXml {
                rootProject.subprojects { p ->
                    if (p.pluginManager.hasPlugin('maven-publish')) {
                        def depNode = asNode().dependencyManagement.first().get('dependencies').first().appendNode('dependency')
                        depNode.appendNode('groupId', p.group)
                        depNode.appendNode('artifactId', p.name)
                        depNode.appendNode('version', p.version)
                    }
                }
            }

            signing.sign it
        }
    }
}
