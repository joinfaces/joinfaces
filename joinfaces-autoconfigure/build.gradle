plugins {
    id "com.github.spotbugs" version "5.0.14"
}

apply plugin: "java-library"
apply plugin: "checkstyle"
apply plugin: "pmd"
apply plugin: "jacoco"
apply plugin: "io.freefair.lombok"
apply plugin: "io.freefair.maven-optional"
apply plugin: "io.freefair.maven-publish-java"

description = 'JoinFaces AutoConfigure'
tasks.named("jar", Jar) {
    manifest.attributes('Automatic-Module-Name': 'joinfaces.autoconfigure')
}

gradleLint.rules -= 'transitive-duplicate-dependency-class'

dependencies {
    api platform(project(':joinfaces-dependencies'))
    annotationProcessor platform(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-autoconfigure-processor'

    api 'org.springframework.boot:spring-boot-autoconfigure'
    api project(":joinfaces")
    implementation 'io.github.classgraph:classgraph'

    compileOnly 'jakarta.platform:jakarta.jakartaee-web-api:10.0.0'

    optional 'org.springframework.boot:spring-boot-starter'
    optional 'org.springframework:spring-web'
    optional 'org.springframework.boot:spring-boot-starter-tomcat'
    optional 'org.springframework.boot:spring-boot-starter-jetty'
    optional 'org.springframework.boot:spring-boot-starter-undertow'
    optional 'org.springframework.boot:spring-boot-starter-security'
    optional 'org.springframework.session:spring-session-core'
    optional 'org.hibernate.orm:hibernate-core'
    optional 'org.springframework:spring-orm'
    optional 'org.jboss.weld.servlet:weld-servlet-core'
    optional "org.glassfish:jakarta.faces:$mojarra4Version"
    optional "org.apache.myfaces.core:myfaces-impl:$myfaces4Version"
    optional 'org.omnifaces:omnifaces'
    optional 'org.primefaces:primefaces::jakarta'
    optional 'org.glassfish.jaxb:jaxb-runtime'

    optional 'com.github.adminfaces:admin-template'
    optional 'com.github.adminfaces:admin-theme'

    optional 'org.apache.myfaces.tobago:tobago-core'
    optional 'org.apache.myfaces.tobago:tobago-theme-standard'
    
    optional 'org.ocpsoft.rewrite:rewrite-servlet'
    optional 'org.ocpsoft.rewrite:rewrite-integration-spring'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation project(':joinfaces-test')
    testImplementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

tasks.named("compileJava", JavaCompile) {
    inputs.files(processResources)
}

tasks.named("test", Test) {
    include "**/*Test.class"
}

configurations {
    mojarraIntegTestRuntime
    myfacesIntegTestRuntime

    mojarraIntegTestRuntime.extendsFrom testRuntimeClasspath
    myfacesIntegTestRuntime.extendsFrom testRuntimeClasspath

    mojarraIntegTestRuntime.exclude group: 'org.apache.myfaces.core'
    myfacesIntegTestRuntime.exclude group: 'org.glassfish', module: 'jakarta.faces'
}

tasks.register("mojarraIntegTest", Test) {
    include "**/*IT.class"
    exclude "**/myfaces/**.class"
    classpath = configurations.mojarraIntegTestRuntime + sourceSets.main.output + sourceSets.test.output
    shouldRunAfter test
}

tasks.register("myfacesIntegTest", Test) {
    include "**/*IT.class"
    exclude "**/mojarra/**.class"
    classpath = configurations.myfacesIntegTestRuntime + sourceSets.main.output + sourceSets.test.output
    shouldRunAfter test
}

tasks.named("check") {
    dependsOn mojarraIntegTest
    dependsOn myfacesIntegTest
}

tasks.named("jacocoTestReport") {
    executionData mojarraIntegTest, myfacesIntegTest
}
